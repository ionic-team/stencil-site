/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';


declare global {

  namespace StencilComponents {
    interface AppBurger {
      'toggleLeftSidebar': () => void;
    }
  }

  interface HTMLAppBurgerElement extends StencilComponents.AppBurger, HTMLStencilElement {}

  var HTMLAppBurgerElement: {
    prototype: HTMLAppBurgerElement;
    new (): HTMLAppBurgerElement;
  };
  interface HTMLElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  interface ElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-burger': JSXElements.AppBurgerAttributes;
    }
  }
  namespace JSXElements {
    export interface AppBurgerAttributes extends HTMLAttributes {
      'toggleLeftSidebar'?: () => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppIcon {
      'name': string;
    }
  }

  interface HTMLAppIconElement extends StencilComponents.AppIcon, HTMLStencilElement {}

  var HTMLAppIconElement: {
    prototype: HTMLAppIconElement;
    new (): HTMLAppIconElement;
  };
  interface HTMLElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  interface ElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-icon': JSXElements.AppIconAttributes;
    }
  }
  namespace JSXElements {
    export interface AppIconAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppMarked {
      'doc': string;
    }
  }

  interface HTMLAppMarkedElement extends StencilComponents.AppMarked, HTMLStencilElement {}

  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-marked': JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      'doc'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DemoCard {
      'demoUrl': string;
      'description': string;
      'imgPath': string;
      'name': string;
      'sourceUrl': string;
    }
  }

  interface HTMLDemoCardElement extends StencilComponents.DemoCard, HTMLStencilElement {}

  var HTMLDemoCardElement: {
    prototype: HTMLDemoCardElement;
    new (): HTMLDemoCardElement;
  };
  interface HTMLElementTagNameMap {
    'demo-card': HTMLDemoCardElement;
  }
  interface ElementTagNameMap {
    'demo-card': HTMLDemoCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demo-card': JSXElements.DemoCardAttributes;
    }
  }
  namespace JSXElements {
    export interface DemoCardAttributes extends HTMLAttributes {
      'demoUrl'?: string;
      'description'?: string;
      'imgPath'?: string;
      'name'?: string;
      'sourceUrl'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DemosPage {

    }
  }

  interface HTMLDemosPageElement extends StencilComponents.DemosPage, HTMLStencilElement {}

  var HTMLDemosPageElement: {
    prototype: HTMLDemosPageElement;
    new (): HTMLDemosPageElement;
  };
  interface HTMLElementTagNameMap {
    'demos-page': HTMLDemosPageElement;
  }
  interface ElementTagNameMap {
    'demos-page': HTMLDemosPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demos-page': JSXElements.DemosPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DemosPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DocumentComponent {
      'pages': string[];
    }
  }

  interface HTMLDocumentComponentElement extends StencilComponents.DocumentComponent, HTMLStencilElement {}

  var HTMLDocumentComponentElement: {
    prototype: HTMLDocumentComponentElement;
    new (): HTMLDocumentComponentElement;
  };
  interface HTMLElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'document-component': JSXElements.DocumentComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DocumentComponentAttributes extends HTMLAttributes {
      'pages'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LandingPage {

    }
  }

  interface HTMLLandingPageElement extends StencilComponents.LandingPage, HTMLStencilElement {}

  var HTMLLandingPageElement: {
    prototype: HTMLLandingPageElement;
    new (): HTMLLandingPageElement;
  };
  interface HTMLElementTagNameMap {
    'landing-page': HTMLLandingPageElement;
  }
  interface ElementTagNameMap {
    'landing-page': HTMLLandingPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'landing-page': JSXElements.LandingPageAttributes;
    }
  }
  namespace JSXElements {
    export interface LandingPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LazyIframe {
      'frameBorder': string;
      'height': string;
      'name': string;
      'scrolling': string;
      'src': string;
      'width': string;
    }
  }

  interface HTMLLazyIframeElement extends StencilComponents.LazyIframe, HTMLStencilElement {}

  var HTMLLazyIframeElement: {
    prototype: HTMLLazyIframeElement;
    new (): HTMLLazyIframeElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-iframe': JSXElements.LazyIframeAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyIframeAttributes extends HTMLAttributes {
      'frameBorder'?: string;
      'height'?: string;
      'name'?: string;
      'scrolling'?: string;
      'src'?: string;
      'width'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NotfoundPage {

    }
  }

  interface HTMLNotfoundPageElement extends StencilComponents.NotfoundPage, HTMLStencilElement {}

  var HTMLNotfoundPageElement: {
    prototype: HTMLNotfoundPageElement;
    new (): HTMLNotfoundPageElement;
  };
  interface HTMLElementTagNameMap {
    'notfound-page': HTMLNotfoundPageElement;
  }
  interface ElementTagNameMap {
    'notfound-page': HTMLNotfoundPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'notfound-page': JSXElements.NotfoundPageAttributes;
    }
  }
  namespace JSXElements {
    export interface NotfoundPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PwasPage {

    }
  }

  interface HTMLPwasPageElement extends StencilComponents.PwasPage, HTMLStencilElement {}

  var HTMLPwasPageElement: {
    prototype: HTMLPwasPageElement;
    new (): HTMLPwasPageElement;
  };
  interface HTMLElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  interface ElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pwas-page': JSXElements.PwasPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PwasPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ResourcesPage {

    }
  }

  interface HTMLResourcesPageElement extends StencilComponents.ResourcesPage, HTMLStencilElement {}

  var HTMLResourcesPageElement: {
    prototype: HTMLResourcesPageElement;
    new (): HTMLResourcesPageElement;
  };
  interface HTMLElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  interface ElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'resources-page': JSXElements.ResourcesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ResourcesPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteHeader {

    }
  }

  interface HTMLSiteHeaderElement extends StencilComponents.SiteHeader, HTMLStencilElement {}

  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteMenu {

    }
  }

  interface HTMLSiteMenuElement extends StencilComponents.SiteMenu, HTMLStencilElement {}

  var HTMLSiteMenuElement: {
    prototype: HTMLSiteMenuElement;
    new (): HTMLSiteMenuElement;
  };
  interface HTMLElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-menu': JSXElements.SiteMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteMenuAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StencilSite {

    }
  }

  interface HTMLStencilSiteElement extends StencilComponents.StencilSite, HTMLStencilElement {}

  var HTMLStencilSiteElement: {
    prototype: HTMLStencilSiteElement;
    new (): HTMLStencilSiteElement;
  };
  interface HTMLElementTagNameMap {
    'stencil-site': HTMLStencilSiteElement;
  }
  interface ElementTagNameMap {
    'stencil-site': HTMLStencilSiteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stencil-site': JSXElements.StencilSiteAttributes;
    }
  }
  namespace JSXElements {
    export interface StencilSiteAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
